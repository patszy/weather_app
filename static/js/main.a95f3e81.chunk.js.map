{"version":3,"sources":["components/SelectCity.js","components/City.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["SelectCity","props","setInputValue","handleSubmit","className","onSubmit","type","value","inputValue","onChange","e","target","placeholder","City","weatherData","date","content","main","Fragment","name","sys","country","Math","round","temp","pressure","weather","api","Weather","useState","setWeatherData","setDate","todayDate","d","day","getDay","getDate","month","getMonth","year","getFullYear","event","preventDefault","fetch","then","response","json","data","Date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oPAkBeA,EAhBI,SAAAC,GAAU,IAClBC,EAA+BD,EAA/BC,cAAeC,EAAgBF,EAAhBE,aAEtB,OACI,0BAAMC,UAAU,aAAaC,SAAUF,GACnC,2BACIG,KAAK,OACLF,UAAU,aACVG,MAAON,EAAMO,WACbC,SAAU,SAAAC,GAAC,OAAER,EAAcQ,EAAEC,OAAOJ,QACpCK,YAAY,qBCiBbC,EA3BF,SAAAZ,GAAU,IACda,EAAiCb,EAAjCa,YAAaC,EAAoBd,EAApBc,KAAMP,EAAcP,EAAdO,WACpBQ,EAAU,KAkBd,OAfIA,EADyB,oBAApBF,EAAYG,MAAoC,KAAbT,EAEpC,kBAAC,IAAMU,SAAP,KACI,yBAAKd,UAAU,gBACX,wBAAIA,UAAU,YAAYU,EAAYK,KAAtC,KAA8CL,EAAYM,IAAIC,SAC9D,uBAAGjB,UAAU,QAAQW,IAEzB,yBAAKX,UAAU,eACX,uBAAGA,UAAU,QAAQkB,KAAKC,MAAMT,EAAYG,KAAKO,MAAjD,UACA,uBAAGpB,UAAU,YAAYU,EAAYG,KAAKQ,SAA1C,SAEJ,uBAAGrB,UAAU,QAAQU,EAAYY,QAAQ,GAAGT,OAG1C,GAGV,yBAAKb,UAAU,eACVY,ICpBPW,EACG,mCADHA,EAEM,uCAsCGC,EAnCC,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAEXrB,EAFW,KAECN,EAFD,OAGoB2B,mBAAS,IAH7B,mBAGXf,EAHW,KAGEgB,EAHF,OAIMD,mBAAS,IAJf,mBAIXd,EAJW,KAILgB,EAJK,KAiBZC,EAAY,SAAAC,GACd,IAEIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC/DD,EAAEE,UACbpB,EAAOkB,EAAEG,UACTC,EAJS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIzGJ,EAAEK,YACjBC,EAAON,EAAEO,cAEb,OAAOT,EAAQ,GAAD,OAAIG,EAAJ,YAAWnB,EAAX,YAAmBsB,EAAnB,YAA4BE,KAG9C,OACI,yBAAKnC,UAAU,WACX,kBAAC,EAAD,CAAYF,cAAeA,EAAeC,aAxB7B,SAAAsC,GACjBA,EAAMC,iBAENC,MAAM,GAAD,OAAIhB,EAAJ,qBAA4BnB,EAA5B,kBAAgDmB,EAAhD,kBACJiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFf,EAAU,IAAIgB,MACdlB,EAAeiB,SAkBf,kBAAC,EAAD,CAAMjC,YAAaA,EAAaC,KAAMA,EAAMP,WAAYA,MC5BrDyC,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCKc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a95f3e81.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SelectCity = props => {\r\n    const {setInputValue, handleSubmit} = props;\r\n\r\n    return(\r\n        <form className=\"search-box\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                className=\"search-bar\"\r\n                value={props.inputValue}\r\n                onChange={e=>setInputValue(e.target.value)}\r\n                placeholder=\"Search city...\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SelectCity;","import React from 'react';\r\n\r\nconst City = props => {\r\n    let {weatherData, date, inputValue} = props;\r\n    let content = null;\r\n\r\n    {(typeof weatherData.main != \"undefined\" && inputValue!=='') ? (\r\n        content = (\r\n            <React.Fragment>\r\n                <div className=\"location-box\">\r\n                    <h2 className=\"location\">{weatherData.name}, {weatherData.sys.country}</h2>\r\n                    <p className=\"date\">{date}</p>\r\n                </div>\r\n                <div className=\"weather-box\">\r\n                    <p className=\"temp\">{Math.round(weatherData.main.temp)} &#176;C</p>\r\n                    <p className=\"pressure\">{weatherData.main.pressure} hPa</p>\r\n                </div>\r\n                <p className=\"desc\">{weatherData.weather[0].main}</p>\r\n            </React.Fragment>\r\n        )\r\n    ) : content = ''}\r\n\r\n    return (\r\n        <div className=\"content-box\">\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default City;","import React, {useState} from 'react';\r\nimport SelectCity from './SelectCity';\r\nimport City from './City';\r\n\r\nconst api = {\r\n    key: 'b6907d289e10d714a6e88b30761fae22',\r\n    baseUrl: `https://openweathermap.org/data/2.5/`\r\n}\r\n\r\nconst Weather = () => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [weatherData, setWeatherData] = useState({});\r\n    const [date, setDate] = useState('');\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        fetch(`${api.baseUrl}weather?q=${inputValue}&appid=${api.key}&units=metric`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            todayDate(new Date());\r\n            setWeatherData(data);\r\n        })\r\n    }\r\n\r\n    const todayDate = d => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n\r\n        return setDate(`${day} ${date} ${month} ${year}`);\r\n    }\r\n\r\n    return (\r\n        <div className='weather'>\r\n            <SelectCity setInputValue={setInputValue} handleSubmit={handleSubmit} />\r\n            <City weatherData={weatherData} date={date} inputValue={inputValue} />\r\n        </div>\r\n    );\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './App.css';\r\nimport Weather from './components/Weather'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}