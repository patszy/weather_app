{"version":3,"sources":["components/SelectCity.js","components/City.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["SelectCity","props","className","onSubmit","submit","type","value","inputValue","onChange","getInputValue","placeholder","City","weather","error","cityName","date","weatherData","content","Fragment","sys","country","Math","round","main","temp","pressure","todayDate","d","day","getDay","getDate","month","getMonth","year","getFullYear","Weather","handleInputChange","event","setState","target","handleCitySubmit","preventDefault","baseUrl","state","fetch","then","response","ok","Error","json","data","prevState","Date","catch","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iPAgBeA,EAdI,SAAAC,GACf,OACI,0BAAMC,UAAU,aAAaC,SAAUF,EAAMG,QACzC,2BACIC,KAAK,OACLH,UAAU,aACVI,MAAOL,EAAMM,WACbC,SAAUP,EAAMQ,cAChBC,YAAY,qBCoBbC,EA5BF,SAAAV,GAAU,IAAD,EAC2BA,EAAMW,QAA5CC,EADW,EACXA,MAAOC,EADI,EACJA,SAAUC,EADN,EACMA,KAAMC,EADZ,EACYA,YAE1BC,EAAU,KAkBd,OAhBIJ,GAASC,IACTG,EACI,kBAAC,IAAMC,SAAP,KACI,yBAAKhB,UAAU,gBACX,wBAAIA,UAAU,YAAYY,EAA1B,KAAsCE,EAAYG,IAAIC,SACtD,uBAAGlB,UAAU,QAAQa,IAEzB,yBAAKb,UAAU,eACX,uBAAGA,UAAU,QAAQmB,KAAKC,MAAMN,EAAYO,KAAKC,MAAjD,UACA,uBAAGtB,UAAU,YAAYc,EAAYO,KAAKE,SAA1C,SAEJ,uBAAGvB,UAAU,QAAQc,EAAYJ,QAAQ,GAAGW,QAMpD,6BACKV,EAAM,cAAD,OAAgBC,GAAaG,IClBzCS,EAAY,SAAAC,GACd,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbd,EAAOY,EAAEG,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGJ,EAAEK,YACjBC,EAAON,EAAEO,cAEb,MAAM,GAAN,OAAUN,EAAV,YAAiBb,EAAjB,YAAyBgB,EAAzB,YAAkCE,IA0DvBE,E,YAtDX,WAAYlC,GAAQ,IAAD,8BACf,4CAAMA,KAWVmC,kBAAoB,SAAAC,GAChB,EAAKC,SAAS,CACV/B,WAAY8B,EAAME,OAAOjC,SAdd,EAkBnBkC,iBAAmB,SAAAH,GACfA,EAAMI,iBACN,IAAMC,EAAO,wDAAoD,EAAKC,MAAMpC,WAA/D,kBAnCN,mCAmCM,iBAEbqC,MAAMF,GACLG,MAAK,SAAAC,GACF,GAAGA,EAASC,GAAI,OAAOD,EACvB,MAAME,MAAM,sBAEfH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACF,EAAKZ,UAAS,SAAAa,GAAS,MAAK,CACxBtC,OAAO,EACPC,SAAUqC,EAAU5C,WACpBQ,KAAMW,EAAU,IAAI0B,MACpBpC,YAAakC,SAGpBG,OAAM,SAAAxC,GACHyC,QAAQC,IAAI1C,GACZ,EAAKyB,UAAS,SAAAa,GAAS,MAAK,CACxBtC,OAAO,EACPC,SAAUqC,EAAU5C,mBArC5B,EAAKoC,MAAQ,CACTpC,WAAY,GACZO,SAAU,GACVC,KAAM,GACNC,YAAa,GACbH,OAAO,GARI,E,sEA8Cf,OACI,yBAAKX,UAAU,WACX,kBAAC,EAAD,CAAYY,SAAU0C,KAAKb,MAAM7B,SAAUL,cAAe+C,KAAKpB,kBAAmBhC,OAAQoD,KAAKhB,mBAC/F,kBAAC,EAAD,CAAM5B,QAAS4C,KAAKb,a,GAlDdc,aCPPC,MARf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,QCKcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM4D,a","file":"static/js/main.bd361e18.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SelectCity = props => {\r\n    return(\r\n        <form className=\"search-box\" onSubmit={props.submit}>\r\n            <input\r\n                type=\"text\"\r\n                className=\"search-bar\"\r\n                value={props.inputValue}\r\n                onChange={props.getInputValue}\r\n                placeholder=\"Search city...\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SelectCity;","import React from 'react';\r\n\r\nconst City = props => {\r\n    const {error, cityName, date, weatherData} = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if(!error && cityName) {\r\n        content = (\r\n            <React.Fragment>\r\n                <div className=\"location-box\">\r\n                    <h2 className=\"location\">{cityName}, {weatherData.sys.country}</h2>\r\n                    <p className=\"date\">{date}</p>\r\n                </div>\r\n                <div className=\"weather-box\">\r\n                    <p className=\"temp\">{Math.round(weatherData.main.temp)} &#176;C</p>\r\n                    <p className=\"pressure\">{weatherData.main.pressure} hPa</p>\r\n                </div>\r\n                <p className=\"desc\">{weatherData.weather[0].main}</p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {error? `Not found: ${cityName}` : content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default City;","import React, {Component} from 'react';\r\nimport SelectCity from './SelectCity';\r\nimport City from './City';\r\n\r\n//Key to API;\r\nconst APIKey = 'b6907d289e10d714a6e88b30761fae22';\r\n\r\nconst todayDate = d => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n}\r\n\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputValue: '',\r\n            cityName: '',\r\n            date: '',\r\n            weatherData: '',\r\n            error: false\r\n        }\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        this.setState({\r\n            inputValue: event.target.value\r\n        });\r\n    }\r\n\r\n    handleCitySubmit = event => {\r\n        event.preventDefault();\r\n        const baseUrl = `https://openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&appid=${APIKey}&units=metric`;\r\n\r\n        fetch(baseUrl)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            throw Error(\"Wrong City Name\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState(prevState => ({\r\n                error: false,\r\n                cityName: prevState.inputValue,\r\n                date: todayDate(new Date()),\r\n                weatherData: data\r\n            }))\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            this.setState(prevState => ({\r\n                error: true,\r\n                cityName: prevState.inputValue\r\n            }))\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='weather'>\r\n                <SelectCity cityName={this.state.cityName} getInputValue={this.handleInputChange} submit={this.handleCitySubmit} />\r\n                <City weather={this.state} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './App.css';\r\nimport Weather from './components/Weather'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}